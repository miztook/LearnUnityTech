12. 屏幕后处理效果
	OnRenderImage	不透明处理后，透明处理后
	1) 调整亮度饱和度对比度			//饱和度区分RGB的权重，亮度对比度计算
	2) 边缘检测 		//卷积，相邻像素计算
	3) 高斯模糊		//高斯方程，距离越近的像素影响越大
	4) Bloom 			//原理: 根据一个阈值提取图像中较亮度区域，存储在纹理中，再利用高斯模糊对其进行模糊处理，模拟光线扩散效果，最好和原图像混合
		BloomHD		//开启HDR后，亮度可以超过1，可以利用高精度更好的提取亮度区域
	5) 运动模糊		//利用Accumulation混合多张图像，取平均值

13. 使用深度和法线纹理



14. 非真实感渲染



15. 使用噪声



16. Unity中的渲染优化技术
	移动平台的特点 	 TBDR结构，Early-Z 提前找到可见片元，传统结构 Overdraw可能造成性能瓶颈
	
	1) CPU优化
		使用批处理技术减少draw call数目 			//过多的drawcall导致cpu需要花时间改变渲染状态，提交drawcall
																	//动态批处理(多pass无法使用)，静态批处理，atlas，共享材质
	2) GPU优化
		减少需要处理的顶点数目
			优化几何体
			使用模型的LOD技术
			使用遮挡剔除技术
		减少需要处理的片元数目
			控制绘制顺序							//提前深度测试
			警惕透明物体							//alphablend从后往前渲染，不写深度，无法提前深度测试  alphatest的discard改变了是否渲染结果，也无法使用提前深度测试的优化
			减少实时光照							//逐像素光照会增加AddtionalPass，成倍增加drawcall且无法批处理，应该使用lightmap和逐顶点光照(实时光源) 和 SH等
		减少计算复杂度
			使用Shader的LOD技术				//Shader.globalMaximumLOD
			代码优化						//精度，分支，复杂运算
	3) 节省内存带宽
		减少纹理大小				//生成mipmap，压缩纹理
		利用分辨率缩放			//避免屏幕分辨率过高
			
			