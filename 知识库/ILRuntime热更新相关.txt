https://blog.csdn.net/mango9126/article/details/114131829

最后的技术方案是这样：

1. 基本限制
热更部分的代码都不继承MonoBehaviour，也就是都不挂脚本，非热更部分随意：热更对MonoBehaviour这种比较特殊东西的支持都挺麻烦，要么不用，要么只是做个不可热更的消息转发层；要么开发时挂脚本，打包时用某种特殊的方式把它变成代码里动态AddComponent。

2. Android
不用任何第三方的热更方案，用C#反射执行DLL，性能和代码写法和纯C#基本一样。
Google Pay强制要求在2019年8月之前App都支持64位，Unity的应对方案是Android IL2cpp，暂时没有支持mono backend 64位的打算。所以到时候只能是IL2CPP + ILRuntime的方式，性能会差一大截，主要慢在ILRuntime上。

3. iOS
ILRuntime + DLL 解释执行，当然是在IL2CPP下。

4. 优点
语言(C#)\开发环境\工具链统一，随时可以变成不支持热更形式，如果苹果未来不允许任何解释执行的方式。

框架搭好后，满足一些限制条件(非硬性限制，主要是避免麻烦，限制主要是1个，可热更部分的代码不要继承不可热更的代码, 不继承MonoBehaviour是这个限制的子集)，写逻辑的同学开发方式和原生C#开发完全一样，包括调试。

第三方插件直接可用（大部分插件都是基于C#写的）.

5. 缺点
稳定性的坑还是有一些：通常发生于一些相对高级的语言特性组合，特别是各种反射代码。另外.net4.6的async\wait所支持的现在版本应该也还不够稳定，纯计算的性能弱于Lua，计算密集型的代码还是想办法放在不可热更新的部分吧。

历史短，Git贡献者少，项目考验少（据我的了解，上线的商业项目在x - 1x之间，具体的项目有MMO，SLG，休闲，也有棋牌），原理上大的优化空间没有，小的优化空间还是有一些；另外整合了各种常用Feature的框架也少 。