1. 背景技术
	这是一套为移动端项目定制的打包和更新系统，由Jenkins的分布式打包机制为基础概念而扩展开发而来。
	作为基础版本的功能已经基本完成。后续会经过版本迭代，逐步完善功能与优化性能。

2. 背景技术存在的问题
	项目中使用Jenkins作为打包工具，一般是和某种版本管理工具如(git, svn等)配合使用，通过在部署在指定机器上的Jenkins节点，
	在指定的分支上获取项目的代码和资源，运行带参数的命令执行打包过程，远程客户端可以通过一个网页界面查看生成结果。
	在具体的移动项目实践中，Jenkins能满足一部分远程打包的需求，但也存在几个不足：
		1) 版本管理。Jenkins的打包记录以递增数字的方式呈现，无法和项目的版本号管理建立直接联系
		2) 对更新包的支持。移动游戏一般分为基础包 + 多个更新包的开发模式，更新包指的是游戏的增量资源，随着游戏的运营陆续发出由玩家自动下载。
			Jenkins不能直接区分基础包和更新包。
		3) 自定义的构建需求。在构建中通常需要一些自定义的需求比如机器之间通过ftp curl等上传和下载，pc和mac机器通过python shell脚本通信等等，
			这些过程在执行中可能由于某些因素中断，在中断时需要停止整个构建过程并给出详细日志记录。这种多样化的构建需求Jenkins支持起来较为困难。
		4) 对打包执行和结果显示的需求。在打包过程中，客户端有时需要停止某个更新版本或者增加某个空更新版本，并希望完全不记录某次构建以保持版本号的连续。
			这就需要有一种方法可以控制构建系统的数据库记录。

3. 本申请技术方案详细阐述
		本系统在进行打包任务(基础包或更新包)时，主要分为以下几个部分:
			1) 版本管理工具，在开始一个打包任务时，本系统使用Svn版本号作为此次任务的标识
			2) 打包任务的版本管理，版本号(App版本号 + 资源版本号)和打包任务进行对应
			3) Web页面，通过web的形式让使用者新建打包更新任务，显示当前任务状态等。
			4) MySql数据存储，维护历史任务的版本号对应的打包结果
			5) Unity的打包和更新资源生成接口，打包系统通过调用接口实现打包功能，结果存储在特定的目录下。
			6) Python的打包任务管理，实现打包任务的监听,执行,日志等功能。
			7) Python的系统功能调用，比如管理svn, Ftp的上传下载, 文件操作，SSH远程管理等。
		
		针对2提到的Jenkins打包系统的不足，本系统的解决方案如下:
			1) 版本管理。本系统使用Svn版本管理工具来管理游戏开发过程中的资源和代码版本，
				设置Svn的分支和版本号，再设置是打基础包还是更新包，如果是基础包填写App版本号，就可以开始一个打包任务
				例如：要打一个App版本为1.0.0的基础包，用svn号111，生成的就是 1.0.0版本的基础包app 和 1.0.0.0的资源版本的更新资源，对应svn号111
				下一次需要打一个更新包，用svn号112，生成的就是 1.0.0.1的资源版本的更新包，对应svn号112 (基础包app通过更新资源包的前三位版本号获取)
			
			2) 对更新包的支持。对一次打包任务，
				如果是基础包则产出为: 基础包app + 基础资源版本号的资源。
				如果是更新包则产出为：更新资源版本号的资源。(app使用更新版本号对应的基础包app)
				在建立一个新任务时，可以选择是重新打一次基础包，也可以选择在之前的基本包版本的基础上打更新包
			
			3）自定义的构建需求。本系统的一次打包任务，可以看做是 远程控制Unity机器，取代码资源，构建App和资源，从Ftp获取对应版本资源，比较差异产生更新包，上传到Ftp存储结果，数据库存储打包版本记录的过程。
				每次打包任务的日志是整个串行化流程的日志，在执行远程控制，执行Unity命令，Ftp操作等过程中，每个步骤都记录执行命令参数，执行过程，执行结果等信息，
				如果某一步骤执行失败时，命令会记录失败原因并中断整个打包流程。
				
			4）对打包执行和结果显示的需求。在打包过程中，打包状态和打包机的状态都可以通过前端Web页面显示，
				如果我们不想使用某个版本的构建结果，方便重新使用某个版本号，可以通过Web页面操作来删除某个打包记录，也就是操作数据库中记录的版本信息。
		
		实现方案：
			部署环境: Windows, MacOS(用作Unity的ios版本打包)
			1）	前端Web页面: 
					WampServer (Apache Web服务器、PHP解释器以及MySQL数据库的整合软件包)
					Laravel (一个PHP的MVC框架)
			2）	MySql数据库存储打包版本信息
			3）	bat批处理在Windows下实现 Unity资源打包，App打包(Windows和Android平台)
				Shell脚本实现App打包 (Ios平台)
			4）	Python打包功能主模块，负责打包任务管理，Svn操作，Ftp操作，文件操作，和SSH远程管理
		
		
4. 第三项技术方案中的可以替代方案
	打包机上部署的python节点系统，执行Unity的命令实现打包的方法，其他打包系统也可以使用

5. 第三项技术手段产生的技术效果
	使用本技术，可以根据移动端项目从内部测试到上线过程中的实际需要，在测试阶段就按照发布基础包 + 多个更新包的模式，灵活地在打包机之间完成通信，存储，日志记录，
	版本管理，分支管理，自定义显示等功能，降低部署的难度，在构建过程中发生的错误可以及时反馈处理，提高游戏项目迭代开发的效率。
	
6. 本方案需要保护的要点
	有版本管理的打包更新系统技术及使用