1. 前端Web页面
   前端以html + php网页形式显示给用户，用户通过Web界面执行新建任务和显示任务列表等操作，打包任务管理模块接收用户在Web页面的请求，使用php脚本通过访问MySql数据库来获取任务的状态信息返回给用户
	
2. 打包任务管理模块
	打包任务管理模块负责对所有的打包任务进行管理，除了通过php脚本访问MySql数据库来获取任务的状态以外，使用python语言调用接口来执行具体的打包任务。
	Python提供的接口有 SVN操作，文件操作，远程管理，FTP操作这几类。
	具体的打包任务则是由Unity命令实现的打包模块，也就是游戏具体的打包规则，如何生成美术打包资源和App。此外还有一个用来存储备份的远程机器，
	在打包过程中用来实现打包生成资源的存储和之前历史版本资源的获取。
	
	
	例如，当打包任务管理模块接收到前端的一个"我要执行一个Android平台打包任务"
		1) 把这个打包任务的版本号，参数，记录到MySql数据库中，并定时将打包执行的log写入数据库中，返回给用户
		2) 调用python的SVN操作接口，取得客户端指定版本的美术资源和程序代码
		3) 调用python的文件操作接口，清空要生成打包文件的目标目录和临时目录
		4) 调用Unity命令，执行Unity的打包模块功能
		5) 如果打包执行失败，则打包任务停止运行，返回结果和执行log给用户界面，并写入MySql数据库
		6) 如果打包执行成功，则调用Python的FTP操作模块，将生成的打包结果按版本号命名，上传到用来存储备份的远程机器上。
	再比如，当打包任务管理模块接收到前端的一个"我要执行一个IOS平台打包任务"
		1) 把这个打包任务的版本号，参数，记录到MySql数据库中，并定时将打包执行的log写入数据库中，返回给用户
		2) 由于IOS打包需要MacOS和XCode，所以调用python的远程管理模块，远程登录MacOS机器
		3) 在登录的MacOS机器上，通过shell命令执行SVN和文件操作，调用Unity命令执行Unity的打包模块功能
		4) 如果打包执行失败，则退出MacOS登录，打包任务停止运行，返回结果和执行log给用户界面，并写入MySql数据库
		5) 如果打包执行成功，则退出MacOS登录，调用Python的FTP操作模块，将生成的打包结果按版本号命名，上传到用来存储备份的远程机器上。
	当打包任务管理模块接收到前端的一个"我要执行一次资源热更新的任务"
		1) 在MySql数据库中查找此App版本下上一个资源版本的信息，如SVN版本号等
		2) 将本次打包的SVN版本号和上一个资源版本的SVN版本号进行比对，如果不需要更新则返回，任务结束
		3) 如果需要执行热更新，调用Unity命令，执行Unity的打包功能，生成新的打包资源
		4) 调用Python的FTP命令，从远程备份机器上获取上一个版本的打包资源
		5) 将生成的打包资源和上一个版本的打包资源进行对比，调用Python的文件操作执行将增量文件拷贝到指定目录，作为更新的美术资源
		6) 调用其他压缩工具生成最终的增量更新文件
	
3. MySql数据存储模块
	MySql数据库存储模块负责存储打包任务的状态，包括任务的版本号，资源版本号，执行任务的log，任务的命令行参数，运行机器的信息等。
	此外，执行log通常需要定时写入数据库，以便向前端用户及时返回任务执行的状态信息。




python单进程 负责逻辑执行
c# unity command 接口封装 Windows/Android 打包功能
shell + xcode command tools 接口封装iOS打包功能
php刷新，html显示页面
1. 定时刷新log文件
2. 对node主机进行联通状态查询
C# node.exe服务，定时推送本地log文件到mysql