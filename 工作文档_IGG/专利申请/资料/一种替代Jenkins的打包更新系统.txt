1. 背景技术
	这是一套为移动端项目定制的打包和更新系统，由Jenkins的分布式打包机制为基础概念而扩展开发而来。
	作为基础版本的功能已经基本完成。后续会经过版本迭代，逐步完善功能与优化性能。

2. 背景技术存在的问题
	项目中使用Jenkins作为打包工具，一般是和某种版本管理工具如(git, svn等)配合使用，通过在部署在指定机器上的Jenkins节点，
	在指定的分支上获取项目的代码和资源，运行带参数的命令执行打包过程，远程客户端可以通过一个网页界面查看生成结果。
	在具体的移动项目实践中，Jenkins能满足一部分远程打包的需求，但也存在几个不足：
		1) 版本管理。Jenkins的打包记录已递增数字的方式呈现，无法和项目的版本号管理建立直接联系
		2) 对更新包的支持。移动游戏一般分为基础包 + 多个更新包的开发模式，更新包指的是游戏的增量资源，随着游戏的运营陆续发出由玩家自动下载。
			Jenkins不能直接区分基础包和更新包。
		3) 自定义的构建需求。在构建中通常需要一些自定义的需求比如机器之间通过ftp curl等上传和下载，pc和mac机器通过python shell脚本通信等等，
			这些过程在执行中可能由于某些因素中断，在中断时需要停止整个构建过程并给出详细日志记录。这种多样化的构建需求Jenkins支持起来较为困难。
		4) 客户端对打包执行和结果显示的需求。在打包过程中，客户端有时需要停止某个更新版本或者增加某个空更新版本，并希望完全不记录某次构建以保持版本号的连续。
			这就需要有一种方法可以控制构建系统的数据库记录。

3. 本申请技术方案详细阐述
		1) 打包机的后台部署环境 python, mysql, PHP, Unity, FTP工具
		2) 搭建流程
		3) 构建资源和构建app
		4) 基于版本号的前端显示和资源下载
		
		
4. 第三项技术方案中的可以替代方案
	打包机上部署的python节点系统，执行Unity的命令实现打包的方法，其他打包系统也可以使用

5. 第三项技术手段产生的技术效果
	使用本技术，可以根据移动端项目从内部测试到上线过程中的实际需要，在测试阶段就按照发布基础包 + 多个更新包的模式，灵活地在打包机之间完成通信，存储，日志记录，
	版本管理，分支管理，自定义显示等功能，降低部署的难度，在构建过程中发生的错误可以及时反馈处理，提高游戏项目迭代开发的效率。
	
6. 本方案需要保护的要点
	有版本管理的打包更新系统技术及使用