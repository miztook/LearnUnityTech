1.1 编写目的
	本文档介绍了一种基于版本管理的打包更新系统和技术实现方案，编写详细设计说明书其目的是为了使开发人员在完成概要设计说明书的基础上完成各项模块的具体实现的设计工作。
1.2 读者对象
	本文档可能的读者对象包括为游戏开发人员，系统维护人员等。
1.3 软件项目概述

1.4 文档概述
	本文档在第2章介绍了本系统的设计目标和设计原则，以及设计约束条件。
	在第3章从需求出发，在3.1节讲述本系统的需求来源及本系统针对性的特点。
	在3.2节的总体结构设计中描述了系统的各个组成部分和模块之间的联系。
	在3.3节简述了系统各个模块的实现方案，从编程语言和技术方案选择方面进行描述。
	在3.4节列出了模块的接口设计，可以基于模块接口进行扩展和技术方案替代。

1.5 定义
	打包：指用软件代码来执行一个指定版本的移动端App的构建。
	更新：用软件代码来执行一个基于特定版本的App的热更新内容，App从CDN网络下载并安装更新内容。
	CDN：内容分发网络，其目的是使用户可就近取得所需内容。
	SVN: 版本控制系统, 项目开发过程中用来管理代码版本

2.1 设计目标和原则
	本系统旨在分析游戏开发中的打包和更新实际需求，定义一个核心的工作流，并拆分各个系统模块，并提供具体实现方案
	本设计过程遵循高内聚，低耦合的原则，保持每个模块的独立性和扩展性

2.2 设计约束
	硬件平台
		一台或多台Windows PC
		一台MacOS电脑
	OS要求
		Windows10以上
		MacOS10以上
	开发语言
		1. Html+CSS
		2. Php
		3. C#
		4. C++
		5. Python
		6. Shell
		7. Bat
	开发工具
		SublimeText
		VSCode
		VSStudio
		XCode
	容量和性能要求
		10G以上硬盘空间
		Intel i7,i9处理器
	灵活性和配置要求
		支持Shell脚本的MacOS
		支持Python运行环境
		
3.1 软件需求概括
	在游戏开发过程中，通常需要基于当前的开发内容构建App进行测试，分发等，在测试过程中也需要在已发布的指定版本的App基础上发布热更新内容。
	本系统提供了一套打包和更新系统，可以完成游戏开发过程中常见的构建App需求，同时可以方便地扩展和定制。
	系统有以下几个典型场景的功能
		1) 执行一个Android平台的App打包任务
		2) 执行一个IOS平台的App打包任务
		3) 执行一次资源热更新的任务
		4) 对目前版本的热更新情况进行总览
	需求概述，
		1. 打包系统的抽象和版本管理
		2. 打包系统的部署，实现前端，后端，打包任务管理模块之间的通信
		3. 打包系统的技术方案
	
3.2 总体结构设计
	本系统在进行打包任务(基础包或更新包)时，主要分为以下几个部分:

	1)	前端Web页面	
		前端以html + php网页形式显示给用户，用户通过Web界面执行新建任务和显示任务列表等操作，打包任务管理模块接收用户在Web页面的请求，使用php脚本通过访问MySql数据库来获取任务的状态信息返回给用户。
	2)	打包任务管理模块
		打包任务管理模块负责对所有的打包任务进行管理，除了通过php脚本访问MySql数据库来获取任务的状态以外，使用python语言调用接口来执行具体的打包任务。
		Python提供的接口有 SVN操作，文件操作，远程管理，FTP操作这几类。
		具体的打包任务则是由Unity命令实现的打包模块，也就是游戏具体的打包规则，如何生成美术打包资源和App。此外还有一个用来存储备份的远程机器，
		在打包过程中用来实现打包生成资源的存储和之前历史版本资源的获取
	3)	MySql数据存储模块
		MySql数据库存储模块负责存储打包任务的状态，包括任务的版本号，资源版本号，执行任务的log，任务的命令行参数，运行机器的信息等。
		此外，执行log通常需要定时写入数据库，以便向前端用户及时返回任务执行的状态信息。



3.3 详细实现设计

3.4 模块接口设计