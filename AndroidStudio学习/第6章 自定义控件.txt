了解常用的自定义控件的方法，照着写

6.1 自定义视图 
	6.1.1 声明属性
		自定义属性， getContext().obtainStyledAttributes获取属性数组
	
	6.1.2 构造对象
	
	6.1.3 测量尺寸
		文本， 图形，布局的尺寸测量
	
	6.1.4 宽高尺寸的动态调整
		onMeasure方法，改变视图中的设置
	
	6.1.5 绘制视图
		onLayout 定位子视图在本布局视图中的位置
		onDraw
		onDispatchDraw
	
例子代码:
		自定义属性:
		layout: 	custom/res/layout/activity_custom_property.xml 
			//ViewPager中设置一个CustomPagerTab的自定义控件 	
		code:  custom/java/com.example.custom/CustomPropertyActivity.java
			//ViewPager设置adapter ImagePagerAdapter
			custom/java/com.example.custom/widget/CustomPagerTab.java
			//自定义一个PagerTabStrip控件，通过getContext().obtainStyledAttributes
			//从R.styleable.CustomPagerTab中获取属性描述
			//在onDraw函数中，使属性生效
		
		测量文本尺寸:
		layout: 	custom/res/layout/activity_measure_text.xml 					
		code:  custom/java/com.example.custom/MeasureTextActivity.java	
			//通过Paint.measureText方法获取一段文字的长宽
		
		测量布局尺寸:
		layout: 	custom/res/layout/activity_measure_layout.xml 					
		code:  custom/java/com.example.custom/MeasureLayoutActivity.java
			//了解LinearLayout的高度获取方法
		
		不滚动列表:
		layout: 	custom/res/layout/activity_on_measure.xml 					
		code:  custom/java/com.example.custom/OnMeasureActivity.java
			//自定义NoScrollListView 继承自ListView
			//其中onMeasure方法自定义高度为最大高度
	
		ONLAYOUT调整布局:
		layout: 	custom/res/layout/activity_on_layout.xml 
			//定义一个OffsetLayout, 自定义layout
		code:  custom/java/com.example.custom/OnLayoutActivity.java
			//onLayout定位子视图在本布局视图中的位置
		
		ONDRAW和DISPATCHDRAW:
		layout: 	custom/res/layout/activity_show_draw.xml 		
			//DrawRelativeLayout自定义一个RelativeLayout
		code:  custom/java/com.example.custom/ShowDrawActivity.java
			//onDraw,onDispatchDraw实现自定义绘制
		
6.2 自定义动画
	6.2.1 任务Runnable
	
	6.2.2 下拉刷新动画
	
	6.2.3 圆弧进度动画
	
例子代码:
		延迟执行:
		layout: 	custom/res/layout/activity_runnable.xml 					
		code:  custom/java/com.example.custom/RunnableActivity.java
		//定义一个Runnable过程，Handler.post执行，removeCallbacks取消，postDelayed延迟执行
		
		下拉刷新动画:
		layout: 	custom/res/layout/activity_pull_refresh.xml 					
		code:  custom/java/com.example.custom/PullRefreshActivity.java	
		//在mRefresh过程中，通过控制mOffset的高度和setPadding达到缩进动画的效果
		
		播放圆弧动画:
		layout: 	custom/res/layout/activity_circle_animation.xml 					
		code:  custom/java/com.example.custom/CircleAnimationActivity.java
		//创建一个CircleAnimation的RelativeLayout，定义两个试图View，通过控制
		//OnDraw方法, 在通过Runnable过程完成绘制
	
6.3 自定义对话框
	6.3.1 对话框Dialog    		实质是window
		setContentView		设置内容视图
		setLayout			设置内容视图的宽高尺寸
		setGravity			设置内容视图的背景 
		setBackgroundDrawable
	
	6.3.2 改进的日期对话框
	
	6.3.3 自定义多级对话框
	
例子代码:
		窗口操作:
		layout: 	custom/res/layout/activity_window.xml 					
		code:  custom/java/com.example.custom/WindowActivity.java
		//Activity实质是Window窗口类，可以通过getWindow()获得窗口执行操作
		
		改进的日期对话框:
		layout: 	custom/res/layout/activity_dialog_date.xml 					
		code:  custom/java/com.example.custom/DialogDateActivity.java	
		//CustomDateDialog创建一个dialog,设置view,view从dialog_date.xml中创建
		//mDateSetListener处理DatePicker的日期选择事件
		//CustomMonthDialog类似，用OnMonthSetListener处理月份选择事件
		
		自定义多级对话框:
		layout: 	custom/res/layout/activity_dialog_multi.xml 					
		code:  custom/java/com.example.custom/DialogMultiActivity.java	
		//点击按钮后，创建一个DialogFriend对话框, lv_friend控件显示朋友列表，用一个FriendAdapter
		//显示对话框时通过 dialog.getWindow().setGravity(Gravity.BOTTOM); 向底部对齐
	
6.4 自定义通知栏
	6.4.1 通知推送Notification
		触发一个通知消息
	
	6.4.2 进度条ProgressBar
		style, max, progress, progressDrawable 层次图形
	
	6.4.3 远程视图RomoteViews
		通知栏可以设置自己的视图，但比Activity有更多的限制
	
	6.4.4 自定义通知的文本颜色设定
	
例子代码:
		发送简单通知:
		layout: 	custom/res/layout/activity_notify_simple.xml 					
		code:  custom/java/com.example.custom/NotifySimpleActivity.java
			//Notification.Builder创建通知栏
		
		发送计时通知:
		layout: 	custom/res/layout/activity_notify_counter.xml 					
		code:  custom/java/com.example.custom/NotifyCounterActivity.java	
			//Notification.Builder setDeleteIntent设置取消跳转的intent,setUsesChronometer开启计时
		
		进度条:
		layout: 	custom/res/layout/activity_notify_progress.xml 	
			//创建一个ProgressBar控件，max, progress表示进度
		code:  custom/java/com.example.custom/NotifyProgressActivity.java	
			//通过setProgress设置进度
		
		发送自定义通知:
		layout: 	custom/res/layout/activity_notify_custom.xml 					
		code:  custom/java/com.example.custom/NotifyCustomActivity.java	
			//通过getNotify方法,activity设置自己的通知栏
			//RemoteViews从notify_music.xml中创建通知栏的外观
	
6.5 服务Service基础
	6.5.1 Service的生命周期
		OnCreate, OnStartCommand, OnDestroy, OnBind, OnRebind, OnUnbind
	
	6.5.2 推送服务到前台
		startForeground, stopForeground
		
例子代码:
		普通启停:
		layout: 	custom/res/layout/activity_service_normal.xml 					
		code:  custom/java/com.example.custom/ServiceNormalActivity.java
			//NormalService继承自Service，创建一个普通服务
			//startService开启服务，stopService停止服务
		
		立即绑定:
		layout: 	custom/res/layout/activity_bind_immediate.xml 					
		code:  custom/java/com.example.custom/BindImmediateActivity.java	
			//将服务绑定到当前进程, bindService方法
		
		延迟绑定:
		layout: 	custom/res/layout/activity_bind_dealy.xml 					
		code:  custom/java/com.example.custom/BindDelayActivity.java	
			//bindService，unbindService
			
		推送服务到前台:
		layout: 	custom/res/layout/activity_notify_service.xml 					
		code:  custom/java/com.example.custom/NotifyServiceActivity.java			
			//startService并传递一个MusicService的Intent
			//MusicService在播放时startForeground推送到前台
	
6.6 手机安全助手
	
例子代码:
		获取应用信息:
		layout: 	custom/res/layout/activity_app_info.xml 					
		code:  custom/java/com.example.custom/AppInfoActivity.java
			//用一个列表控件lv_appinfo，绑定当前的所有程序
			//参考AppUtil.getAppInfo方法，获取app的名称和图标信息
		
		获取流量信息:
		layout: 	custom/res/layout/activity_traffic_info.xml 					
		code:  custom/java/com.example.custom/TrafficInfoActivity.java	
			//TrafficStats.getUidRxBytes获取指定app的流量信息
		
		手机安全助手:
		layout: 	custom/res/layout/activity_mobile_assistant.xml 					
		code:  custom/java/com.example.custom/MobileAssistantActivity.java		
			//了解下界面的布局结构
			//日期，自定义动画，延迟执行流量刷新
	
	
	
	
	
	
	
	
	
	
	