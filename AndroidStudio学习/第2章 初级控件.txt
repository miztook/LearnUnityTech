例子代码主要看两个地方， 工程下面目录 res/layout 和 对应的 activity.java代码
layout下面的xml表示界面的布局，控件，外观等，对应的activity.java代码执行逻辑，控制layout中定义的控件

2.1 像素，颜色，屏幕分辨率

例子代码:
	像素演示:
		layout: 	junior/res/layout/activity_px.xml 					
				//一个LinearLayout，三个TextView显示 "Hello World!"
		code: junior/java/com.example.junior/PxActivity.java					
				//把第三个textView设置padding属性，四周有了间隔
	颜色演示:
		layout: 	junior/res/layout/activity_color.xml 					
				//一个LinearLayout，三个TextView，第一个TextView设置 background 属性改变背景颜色
		code: junior/java/com.example.junior/ColorActivity.java	
				//设置第二个TextView的background为透明，第三个TextView的背景色为绿色
	分辨率演示:
		layout: 	junior/res/layout/activity_screen.xml 					
				//一个LinearLayout，一个TextView
		code:  junior/java/com.example.junior/ScreenActivity.java
				//获取屏幕的分辨率和像素密度，显示字符串
				
2.2 简单布局
	2.2.1 视图View的基本属性
		id, layout_width(match_parent和上级视图一样宽，wrap_content和内容内容一样宽), layout_height, layout_margin(视图和周围视图的空白距离)
		minWidth, minHeight, background, layout_gravity(与上级视图的对齐方式)，padding(视图边缘和内容之间的空白距离)
	
	2.2.2 线性布局LinearLayout
		依次按顺序排列的布局
		orientation 布局的方向, gravity 内部视图与本线性布局的对齐方式， layout_weight 当前视图的宽或高占上级线性布局的权重
	
	2.2.3 滚动视图ScrollView 
		1. 垂直方向滚动时，layout_width要设置为 match_parent, layout_height要设置为 wrap_content
		2. 水平方向滚动时，layout_width要设置为 wrap_content, layout_height要设置为 match_parent
	
例子代码:
		空白间隔演示:
		layout: 	junior/res/layout/activity_margin.xml 					
				//两个LinearLayout，一个TextView，Layout之间的间隔layout_margin，Layout和里面View的间隔padding
		code:  junior/java/com.example.junior/MarginActivity.java
		
		对齐方式演示:
		layout: 	junior/res/layout/activity_gravity.xml 					
				//一个大的LinearLayout包含水平方向两个小的LinearLayout， 左侧的width=0dp, 后侧width=0dp, weight=1，两者宽度权重相等
				//左侧layout_gravity为bottom，gravity为left，布局排列靠底部，内容排列靠左侧
				//左侧layout_gravity为top，gravity为right，布局排列靠顶部，内容排列靠右侧
		code:  junior/java/com.example.junior/GravityActivity.java
	
		滚动视图演示:
		layout: 	junior/res/layout/activity_scroll.xml 	
				//上面的 HorizontalScrollView 中包含一个 LinearLayout，里面有两个View, 水平滚动的 layout_width是 wrap_content，layout_height是match_parent
				//下面的 HorizontalScrollView 中包含一个 LinearLayout，里面有两个View, 垂直滚动的 layout_width是 match_parent，layout_height是wrap_content
		code:  junior/java/com.example.junior/ScrollActivity.java
	
2.3 简单控件
	2.3.1 文本视图TextView
		常用属性 singleLine, ellipsize(省略方式), focusable, focusableInTouchMode
		gravity, lines, maxLines, scrollBars
	
	2.3.2 按钮Button
		学习事件响应的写法
	
	2.3.3 图像视图 ImageView
		显示图像， src图像来源， scaleType设置拉伸类型
	
	2.3.4 图像按钮 ImageButton
		图像按钮，文字+图片

例子代码:
		跑马灯演示:
		layout: 	junior/res/layout/activity_marquee.xml 
				//下面的TextView ellipsize=marquee表示跑马灯， focusable可以获取焦点
		code:  junior/java/com.example.junior/MarqueeActivity.java
				//点击跑马灯，切换跑马灯的TextView是否获得焦点，失去焦点时跑马灯停止

		聊天室演示:
		layout: 	junior/res/layout/activity_bbs.xml 
				//下面的TextView，设置gravity为 left|bottom 内容靠左下对齐，lines maxLines=8最多8行，显示垂直滚动条
		code:  junior/java/com.example.junior/BbsActivity.java
				//点击TextView, 把tv_bbs的文本增加一行文字，长按清空文字，自动滚动

		按钮点击演示:
		layout: 	junior/res/layout/activity_click.xml 
				//定义一个Button
		code:  junior/java/com.example.junior/ClickActivity.java
				//得到按钮控件， setOnClickListener设置点击事件由谁监听 (ClickActivity类监听, MyOnClickListener的onClick方法)
				// setOnLongClickListener 设置长按事件由谁监听 (ClickActivity类监听， MyOnLongClickListener的onLongClick方法)
				//Toast.makeText 显示一个文字提示界面
				
		图像拉伸演示:
		layout: 	junior/res/layout/activity_scale.xml 
				//定义一个ImageView，设置src=@drawable/apple1为一个苹果图像，然后定义7个按钮，注意按钮的排列方法
		code:  junior/java/com.example.junior/ScaleActivity.java
				//设置图形的显示方式，拉伸类型

		屏幕截图演示:	略

		变换图标演示:
		layout: 	junior/res/layout/activity_icon.xml 
				//定义一个ImageButton，设置drawableLeft="@mipmap/ic_launcher"设置文字左侧的图标，下面定义4个按钮
		code:  junior/java/com.example.junior/IconActivity.java
				//用setCompoundDrawables方法，设置图标在按钮文字的左，上，右，下
				
2.4 图形基础
	2.4.1 图形Drawable
		drawable就是图像资源，在res/drawable目录下
	
	2.4.2 状态列表图形
		StateListDrawable设置不同状态下的图形资源
	
	2.4.3 形状图形
	
	2.4.4 九宫格图片
		
例子代码:
		状态列表图形:
		layout: 	junior/res/layout/activity_state.xml 
				//下面的按钮 background="@drawable/btn_nine_selector" 背景图引用了一个资源， 打开drawable/btn_nine_selector.xml
				//selector中定义了 state_pressed 按下状态的图片，和普通状态下的图片
		code:  junior/java/com.example.junior/StateActivity.java

		形状定义图形:
		layout: 	junior/res/layout/activity_shape.xml 
				//定义了两个按钮，在drawable/shape_oval_rose.xml和drawable/shape_rect_gold.xml中定义了两个shape
		code:  junior/java/com.example.junior/ShapeActivity.java
				//设置按钮的BackgroudResource为两个shape
				
		九宫格图片:
		layout: 	junior/res/layout/activity_nine.xml 
				//定义了两个按钮，背景是两个状态列表selector，一个用九宫格图片一个没用，对比拉伸效果
		code:  junior/java/com.example.junior/NineActivity.java
				
2.5 简单计算器

例子代码:
		layout: 	junior/res/layout/activity_calculator.xml 
				//注意计算器界面的布局，排列，以及Button用了一个 style="@style/btn_cal" 
				//Style就是一系列属性的集合，button引用了一个style，就不用每个button都设置一遍了
		code:  junior/java/com.example.junior/CalculatorActivity.java
				//根据输入改变text的显示，大概了解即可
