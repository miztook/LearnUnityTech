继续学习一些布局和控件，同时了解Activity

3.1 其他布局
	3.1.1 相对布局RelativeLayout
		视图和视图之间的相对布局
	
	3.1.2 框架布局FrameLayout
	
例子代码:
		XML定义相对布局:
		layout: 	middle/res/layout/activity_relative_xml.xml 					
				//定义多个Button设置他们的布局属性
				//layout_centerInParent, layout_centerHorizontal, layout_centerVertical, layout_alignParentLeft, layout_alignParentTop, layout_alignParentRight等
		code:  middle/java/com.example.middle/RelativeXmlActivity.java
		
		代码定义相对布局:
		layout: 	middle/res/layout/activity_relative_code.xml 					
		code:  middle/java/com.example.middle/RelativeCodeActivity.java
				//当点击按钮时，分别按指定的参数布局(第一对齐，第二对齐，相对谁)
				//View.setLayoutParams RelativeLayout.LayoutParams属性 addRule
				
		代码定义相对布局:
		layout: 	middle/res/layout/activity_frame.xml 					
		code:  middle/java/com.example.middle/FrameActivity.java
				//当点击按钮时，给FrameLayout下添加View，每个View都相对于FrameLayout的左上角开始
		
3.2 特殊按钮
	3.2.1 复选框CheckBox
	
	3.2.2 开关按钮Switch
	
	3.2.3 单选按钮RadioButton
	
例子代码:
		复选框:
		layout: 	middle/res/layout/activity_checkbox.xml 					
		// 定义CheckBox, 属性checked是否被勾选
		code:  middle/java/com.example.middle/CheckboxActivity.java
		// 监听onCheckedChanged事件，勾选改变时通知
		
		开关按钮:
		layout: 	middle/res/layout/swtich_default.xml 					
		// 定义Switch 
		code:  middle/java/com.example.middle/SwitchDefaultActivity.java
		// 监听onCheckedChanged事件，勾选改变时通知
		
		仿IOS开关按钮:
		layout: 	middle/res/layout/switch_ios.xml 	
		// 定义一个CheckBox，背景图设置为 @drawable/switch_selector，用两张图片表示切换状态
		code:  middle/java/com.example.middle/SwitchIOSActivity.java
		
		水平单选按钮:
		layout: 	middle/res/layout/radio_horizontal.xml 
		// 定义一个RadioGroup，里面有两个RadioButton，RadioButton有checked属性表示是否选中
		code:  middle/java/com.example.middle/RadioHorizontalActivity.java
		//监听onCheckedChanged事件，得到当前被勾选的控件id
		
		垂直自定义单选:
		layout: 	middle/res/layout/radio_vertical.xml 
		//垂直排列两个 RadioButton，第一个RadioButton设置button属性为 @drawable/radio_selector 实现效果
		//第二个RadioButton设置drawableLeft，表示文字左侧的图片，设置为 @drawable/radio_selector 实现效果
		code:  middle/java/com.example.middle/RadioVerticalActivity.java
	
3.3 适配视图基础  适配的意思就是有多个数据项，每个数据项有自己的视图，事件响应等，adapter就是控制指定的一项数据的显示
	3.3.1 下拉框Spinner
	
	3.3.2 数组适配器ArrayAdapter
	
	3.3.3 简单适配器SimpleAdapter

例子代码:
		下拉列表:
		layout: 	middle/res/layout/activity_spinner_dropdown.xml 
			//Spinner控件, spinnerMode=dropdown，为下拉列表模式
		code:  middle/java/com.example.middle/SpinnerDropdownActivity.java	
			//填充Spinner 设置一个ArrayAdapter的适配器，setDropDownViewResource设置适配器每一项的视图
			//监听每一项被选择时的事件 setOnItemSelectedListener
		
		对话框列表:
		layout: 	middle/res/layout/activity_spinner_dialog.xml 		
			//Spinner控件, spinnerMode=dialog，为下拉列表模式
		code:  middle/java/com.example.middle/SpinnerDialogActivity.java	
			//Spinner setPrompt设置对话框的标题
		
		带图标列表:
		layout: 	middle/res/layout/activity_spinner_icon.xml 	
			//Spinner控件, spinnerMode=dialog，为下拉列表模式
		code:  middle/java/com.example.middle/SpinnerIconActivity.java	
			//初始化SimpleAdapter时，声明一个List<Map<String, Object>> list，填充icon, name
			//在初始化SimpleAdapter时，把list的icon和name, 和 R.layout.item_simple的 R.id.iv_icon, R.id.tv_name(一个ImageView, 一个TextView)
			//setDropDownViewResource设置适配器每一项的视图 R.layout.item_simple
	
3.4 编辑框
	3.4.1 文本编辑框EditText
		光标， 边框，自动隐藏输入法，输入回车符自动跳转
		
	3.4.2 自动完成编辑框AutoCompleteTextView
	
例子代码:
		简单编辑框:
		layout: 	middle/res/layout/activity_edit_simple.xml 	
			//EditText控件，属性maxLength最大长度， inputType限制输入的类型，如textPassword密码文字，numberPassword数字密码显示 
		code:  middle/java/com.example.middle/EditSimpleActivity.java	
		
		更换编辑光标:
		layout: 	middle/res/layout/activity_edit_cursor.xml 	
			//EditText的hint属性给出输入的提示，cursorVisible是否显示光标，textCursorDrawable设置光标的图标
		code:  middle/java/com.example.middle/EditCursorActivity.java
		
		更换编辑边框:
		layout: 	middle/res/layout/activity_edit_border.xml 	
			//EditText的 Background 设置边框，null为无边框，设置为drawable/editext_selector控制是否有焦点时的图片
		code:  middle/java/com.example.middle/EditBorderActivity.java
		
		隐藏输入法:
		layout: 	middle/res/layout/activity_edit_hide.xml 	
		code:  middle/java/com.example.middle/EditHideActivity.java
			//为两个EditText设置 addTextChangedListener 设置文本变化的响应类 三个方法 beforeTextChanged, onTextChanged, afterTextChanged
			//是输入11位或6位字符时，隐藏输入法，(系统方法了解即可)
		
		回车自动跳转:
		layout: 	middle/res/layout/activity_edit_jump.xml 				
		code:  middle/java/com.example.middle/EditJumpActivity.java
			//在afterTextChanged中 在输入"\r""\n"(回车)时，把输入的回车键变为空，然后mNextView.requestFocus获得焦点
			//然后获得下一个View的EditText，调用setSelection方法
		
		自动完成编辑:
		layout: 	middle/res/layout/activity_edit_auto.xml 	
			//设置一个AutoCompleteTextView控件，completionHint完成提示，completionThreshold，dropDownHeight设置提示框的高度
		code:  middle/java/com.example.middle/EditAutoActivity.java
			//设置一个ArrayAdapter为下拉框的数组内容
	
3.5 活动Activity基础
	3.5.1 Activity的生命周期
		一个Activity代表一个页面，页面的生命周期
	
	3.5.2 使用Intent传递消息
		Intent复杂Acitivity之间的通信
		1. Intent需标明本次通信请求从哪里来，到哪里去，怎么走
		2. 发起方携带本次通信需要的数据内容，接收方对收到的Intent数据进行解包
		3. 如果发起方要求判断接收方的处理结果，Intent就要负责让接收方传回应答的数据内容
	
	3.5.3 向下一个Activity传递参数
		startActivity
	
	3.5.4 向上一个Activity返回参数
		发送方: startActivityForResult, onActivityResult
		接收方: setResult
		
例子代码:
		跳转与返回:
		layout: 	middle/res/layout/activity_act_jump.xml 	
				middle/res/layout/activity_act_next.xml 	
		code:  middle/java/com.example.middle/ActJumpActivity.java	
				//了解下Activity的生命周期，onClick后Intent设置要跳转的ActNextActivity，然后startActivityForResult请求结果
				//onActivityResult是在由其他Acitivity返回到本Activity时调用， getStringExtra获得传递的字符串
				middle/java/com.example.middle/ActNextActivity.java
				//在onClick时setResult，携带intent返回前一个页面，finsih关闭
		
		横竖屏切换:
		layout: 	middle/res/layout/activity_act_rotate.xml 					
		code:  middle/java/com.example.middle/ActRotateActivity.java
				//横竖屏切换时，看activity的生命周期，了解即可
		
		按下HOME键:
		layout: 	middle/res/layout/activity_act_home.xml 					
		code:  middle/java/com.example.middle/ActHomeActivity.java
				//按下home键时，看activity的生命周期，onPause, onStop, onRestart
		
		跳转到URL:
		layout: 	middle/res/layout/activity_act_uri.xml 					
		code:  middle/java/com.example.middle/ActUriActivity.java
				//三个按钮，通过Intent跳转到特殊功能的页面，Intent.setAction 意图动作， Intent.setData设置路径
		
		请求参数和应答参数:
		layout: 	middle/res/layout/activity_act_request.xml 	
					middle/res/layout/activity_act_response.xml 		
		code:  middle/java/com.example.middle/ActRequestActivity.java
				//传递参数给下一个页面，intent通过putExtra设置参数，通过intent调用startActivityForResult跳转到下一个页面
				//在onActivityResult中响应由其他Activity返回到本页面的结果，通过intent.getStringExtra获取参数
				middle/java/com.example.middle/ActResponseActivity.java
				//在getIntent().getExtras() 获得一个Bundle，里面存储了传递的intent的key, value，通过bundle.getString获取值
				//在onClick后， 建立一个Bundle，intent.putExtras设置参数，setResult把intent返回到上一个页面，finsih关闭
				
3.6 房贷计算器 

例子代码:
		文本校验:
		layout: 	middle/res/layout/activity_text_check.xml 					
		code:  middle/java/com.example.middle/TextCheckActivity.java	
		了解几个校验方法即可
		
		房贷计算器:
		layout: 	middle/res/layout/activity_mortgage.xml 	
			//组织界面结构
		code:  middle/java/com.example.middle/MortgageActivity.java
			//熟悉EditText, RadioGroup, RadioButton, CheckBox, Spinner的使用

3.7 登录App

例子代码:
		提醒对话框:
		layout: 	middle/res/layout/activity_alert.xml 					
		code:  middle/java/com.example.middle/AlertActivity.java	
			//学习AlertDialog.Builder 构造提醒对话框的标题，文本，是否的响应，然后显示AlertDialog
		
		App登录页面:
		layout: 	middle/res/layout/activity_login.xml 	
			//学习界面结构 , 忘记密码按钮用的FrameLayout，这样会包含在EditText中
				middle/res/layout/activity_login_forget.xml 	
			//学习界面结构，获取验证码按钮用的FrameLayout，这样会包含在EditText中
		code:  middle/java/com.example.middle/LoginMainActivity.java
			//复习 RadioButton的事件响应，CheckBox的事件响应，EditText的文本变化响应,
			//Spinner列表的初始化， Activity的跳转，主页面和忘记密码页面的跳转
			//记住密码功能未实现