1. 资源目录
	Assets/SubAssets/Raw/			//原始资源(非prefab)
		Sprite						//图集资源
		Animation					//Animation, Controller
		Character/FaceShaping			//捏脸
		Permanent					//常驻资源			
		Shader
		Scene					//场景资源
			ToGame					//分块场景 .unity
			Final					//光照图资源 LightingData.asset
	
	Assets/SubAssets/Res/
		Prefabs						//prefab目录
		Atlas						//新图集 .spriteatlas
		Font						//字体
		RecastInfo					//导航信息
		SimpleMeshes				//角色低模
		
2. 首包资源
	Assets/SubAssets/Res/Character
	Assets/SubAssets/Raw/Character/FaceShaping
	Assets/SubAssets/Res/SimpleMeshes
	其他由乐变统计的大资源列表
		
3. 打包规则
		1)	收集Res下的 Prefabs, Atlas, Font, RecastInfo中的prefab列表
			在 Raw/Scene/ToGame 下收集分块.unity场景
			在 Raw/Scene/Final 下收集光照图
		2)  对1)中的每个资源每个资源(.prefab .unity)建立assetbundle
		3)	统计1)中资源(.prefab .unity)的所有依赖项
			对所有被依赖的资源，如果被依赖大于1，则每个资源打成assetbundle
		4)	场景每个.unity生成一个bundle
		5)  每个 Raw/Sprite 下的sprite打成一个assetbundle
		6)  捏脸 Raw/Character/FaceShaping 下的贴图和mat打成一个assetbundle
		7)  Raw/Shader 下的资源打成shader assetbundle
			Raw/Permanent 下的资源打成 permanent assetbundle
		8)	Raw/Animation 下的Controller文件 打成一个assetbundle (Animator打包)
		9) 	Raw/Animation 下的anim文件 打成一个assetbundle (Animation打包)
		10) Res/Atlas 下的spriteatlas文件 打成一个assetbundle
		11) PostProcess资源打成 assetbundle
		12) SimpleMeshes 打成一个 assetbundle
		
4. 做分包下载的几个问题
		1)	每个场景.unity.bundle + lightmap.bundle + navmesh 做为一组, 场景之间提取公共引用资源避免场景资源过大
		2)	按游戏等级划分为几个大包包含1中的场景资源，根据游戏等级下载相应的资源
		3)	假如首包到10级，确定首包的场景资源，再加上其他资源，大小不能超过2G，否则需要把其他资源继续按照等级拆分，直到首包足够小
		4)	下载器要支持游戏内下载,下载过程中保持游戏流畅(和在游戏前下载资源不同)
		
	根据现在win包下的资源情况，
		所有bundle资源大小5.06G
		去掉所有Raw/Scene整个目录(即去掉场景)的bundle资源大小2.33G
		如果首包加上首包场景资源，大小是不能控制在2G以内的
	
		
	

