TERA/Character/EtcMarkers
TERA/Character/GhostEffect						//NdotV计算fresnel，和边缘光颜色相乘做颜色，fresnel做alpha
TERA/Character/Godeye
TERA/Character/Heroic
TERA/Character/Heroic_Create
TERA/Character/Heroic_Face
TERA/Character/Heroic_Face_Create
TERA/Character/Heroic_Fashion
TERA/Character/Heroic_Fashion_Effect
TERA/Character/Heroic_Fashion_RainbowFx
TERA/Character/Heroic_Fashion_RainbowFx_Transparent
TERA/Character/Heroic_Fashion_Transparent
TERA/Character/Heroic_Hair
TERA/Character/Heroic_Hair_Creat
TERA/Character/Heroic_WeaponWing
TERA/Character/Heroic_withFX
TERA/Character/NPC
TERA/Character/NPC_VIP
TERA/Character/NPC_VVIP

TERA/Character/Heroic 一个角色4张贴图:
	BaseRGBA
	NormalMap
	SpecularMapRGBA
	Mask   R:Skin G: Emissive
	
	CHARACTERFORWARDPBR		高效
		计算normalDir, viewReflection, lightDir, halfVDir, 水平光lightHDir, halfHDir
		
		计算阴影 attenuation
		Textures: 
			matMask.r 皮肤   1.0 - matMask.r 装备(非皮肤)
		Gloss: 
			glossq(非皮肤), glossk(皮肤)
		SkinColor: 			//由于自定义肤色, 对baseRGBA贴图做皮肤颜色的强化(线性变指数)，过渡到指定的肤色
			skincolor		ColorCstmGamma
			skinspcolor		SpecularmapRGBA对SkinColor插值
		Lightness:
			AttenColor		阴影颜色
			sh 			考虑环境光			ShadeSHPerPixel
			IBL 		ImageBasedLighting 对EnvMap采样，考虑relfectionIntensity, sh, (attentuation  + NdotV * gloss)
			zis			Frsn 菲涅尔项, 装备
			Rim 		边缘光计算
		Specular:
			SpecularGGXWithHeadLight	计算直接高光(皮肤+非皮肤) 	
			SpecularSkin
			CalculateSpecular			ggx直接(皮肤部分) + IBL间接高光(非皮肤部分)
		Diffuse:
			Scattering		次表面散射 + ambient		间接diffuse
			SkinLighting1				直接diffuse
			CalculateDiffuseAddonf		
		FinalColor:
			diffuse + specular + rim + frsn(装备部分的菲涅尔项)
		
	CHARACTERFORWARDGGX		中效	
		和高效相比, 
		Lightness：去掉了 AttenColor, IBL, zis;
		Specular: 只用SpecularGGX, 去掉了IBL间接高光 + frsn菲涅尔计算
		FinalColor: diffuse + specular + rim
		
	CHARACTERFORWARDBASE	低效
		与高效相比，
		SkinColor: 去掉了skinspcolor计算
		Specular: 去掉HeadLight计算，只用SpecularGGX, 去掉了IBL间接高光 + frsn菲涅尔计算
		Diffuse: 去掉scatter, 简化SkinLight计算
		FinalColor: diffuse + specular + rim
		
TERA/Character/Heroic_Hair	一个角色4张贴图:
	BaseRGBA
	NormalMap
	SpecularMapRGBA
	Mask   R:Skin G: Emissive
	
	和角色不同的是 AnisoDir, AnisoOffset 各项异性specular计算，表现头发效果(经验公式)
	两个pass，前面，背面
	前面
		高效: SpecAniso计算高光 + SpecularGGX， Diffuse计算HairDiffuse, Scattering散射
		中效：SpecAniso计算高光， Diffuse计算HairDiffuse, Scattering散射
		低效: 去掉高光, Diffuse计算HairDiffuse
		
	背面：	补充diffuse光照
		
TERA/Character/Heroic_Fashion		一个角色4张贴图:
	BaseRGBA
	NormalMap
	SpecularMapRGBA
	Mask   R:Skin G: Emissive B: Flake1 A: Flake2
	
	和角色相比，增加了Flake的使用
	
TERA/Character/Heroic_Face			一个角色4张贴图:
	BaseRGBA
	NormalMap
	SpecularMapRGBA
	Mask   R:Skin G: Eye
	
	和角色相比，增加了眼睛部分的颜色(增强眼睛的Rim光), 去掉IBL, sh保留
	FinalColor: diffuse + specular + eye + _Rim
	
TERA/Character/NPC		非人形

	高效：皮肤: scatter + SkinDiffuse, 非皮肤: EquipDiffuse，Specular(非ggx, 无IBL，无frsn) + Rim
	低效: diffuse贴图采样 + Specular(BlinnPhong) + Rim
	另加一个死亡效果
	
TERA/Character/NPC_VIP  (人形)
	mask图区分 skin, equip, hair, eye, emissive
	
	Gloss: 
			glossq(非皮肤), glossk(皮肤)
	SkinColor:
			贴图采样计算 skinColor, skinSpColor, hairColor, hairSpColor
			
	Lightness:
		AttenColor		阴影颜色
		sh 			考虑环境光
		IBL 		ImageBasedLighting 对EnvMap采样，考虑relfectionIntensity, sh, (attentuation  + NdotV * gloss)
		zis			Frsn 菲涅尔项
		Rim 		边缘光计算
	Specular:
		CalculateSpecular	
			非头发部分: ggx直接(皮肤+非皮肤), IBL间接(非皮肤)
			头发部分： 各项异性  SpecAniso2
		CalculateDiffusevvip
			皮肤: LightingForSkin 直接diffuse + scatter间接diffuse
			非皮肤: 简单diffuse 
			眼睛颜色: 强化眼睛颜色 + 边缘光 emission
	FinalColor = diffuse + specular + Rim + Zis(菲涅尔项)
		
		
			