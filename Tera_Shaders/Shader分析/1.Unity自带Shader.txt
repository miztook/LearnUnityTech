Legacy Shaders/Bumped Diffuse						
Legacy Shaders/Particles/Alpha Blended				//Blend SrcAlpha OneMinusSrcAlpha
Legacy Shaders/Particles/Alpha Blended Premultiply			//Blend One OneMinusSrcAlpha color * color.a
Mobile/Bumped Diffuse					
Mobile/Diffuse							
Nature/Terrain/Standard2
Particles/Alpha Blended
Particles/Standard Unlit
Standard
Unlit/Texture
Legacy Shaders/Transparent/Bumped Diffuse			
Legacy Shaders/Transparent/Bumped Specular			
Legacy Shaders/Transparent/Diffuse					
Legacy Shaders/Transparent/Specular					
Legacy Shaders/Transparent/Parallax Diffuse
Legacy Shaders/Transparent/Parallax Specular
Legacy Shaders/Transparent/VertexLit
Legacy Shaders/Transparent/Cutout/Bumped Diffuse
Legacy Shaders/Transparent/Cutout/Bumped Specular
Legacy Shaders/Transparent/Cutout/Diffuse
Legacy Shaders/Transparent/Cutout/Specular
Legacy Shaders/Transparent/Cutout/Soft Edge Unlit
Legacy Shaders/Transparent/Cutout/VertexLit
Legacy Shaders/Decal								//贴花 MainTex 和 DecalTex颜色用 DecalTex.a 插值
Legacy Shaders/Self-Illumin/Bumped Diffuse
Legacy Shaders/Self-Illumin/Bumped Specular
Legacy Shaders/Self-Illumin/Diffuse
Legacy Shaders/Self-Illumin/Specular
Legacy Shaders/Self-Illumin/Parallax Diffuse
Legacy Shaders/Self-Illumin/Parallax Specular
Legacy Shaders/Self-Illumin/VertexLit
Legacy Shaders/Lightmapped/Bumped Diffuse
Legacy Shaders/Lightmapped/Bumped Specular
Legacy Shaders/Lightmapped/Diffuse
Legacy Shaders/Lightmapped/Specular
Legacy Shaders/Lightmapped/VertexLit
Legacy Shaders/Bumped Diffuse					
Legacy Shaders/Bumped Specular					
Legacy Shaders/Diffuse							
Legacy Shaders/Diffuse Detail
Legacy Shaders/Diffuse Fast
Legacy Shaders/Specular							
Legacy Shaders/Parallax Diffuse					
Legacy Shaders/Parallax Specular				
Legacy Shaders/VertexLit						
Legacy Shaders/Particles/Additive				//Blend SrcAlpha One
Legacy Shaders/Particles/~Additive-Multiply		//Blend One OneMinusSrcAlpha
Legacy Shaders/Particles/Additive (Soft)		//Blend One OneMinusSrcColor		color.rgb *= col.a
Legacy Shaders/Particles/Alpha Blended			//Blend SrcAlpha OneMinusSrcAlpha
Legacy Shaders/Particles/Anim Alpha Blended		//Blend SrcAlpha OneMinusSrcAlpha	两组uv坐标 colA, colB 用blend获取颜色
Legacy Shaders/Particles/Blend					//Blend DstColor One
Legacy Shaders/Particles/Multiply				//Blend Zero SrcColor
Legacy Shaders/Particles/Multiply (Double)				//Blend DstColor SrcColor
Legacy Shaders/Particles/Alpha Blended Premultiply		//Blend One OneMinusSrcAlpha
Legacy Shaders/Particles/VertexLit Blended			//Blend SrcAlpha OneMinusSrcAlpha	LightMode=Vertex
Legacy Shaders/Reflective/Bumped Diffuse		//surf中用 WorldReflectionVector 通过normal得出refl 用cube图采样, 填充emission
Legacy Shaders/Reflective/Bumped Unlit
Legacy Shaders/Reflective/Bumped Specular
Legacy Shaders/Reflective/Bumped VertexLit
Legacy Shaders/Reflective/Diffuse
Legacy Shaders/Reflective/Specular
Legacy Shaders/Reflective/Parallax Diffuse
Legacy Shaders/Reflective/Parallax Specular
Legacy Shaders/Reflective/VertexLit


表面着色器
		顶点着色器: v2f_surf vert_surf(appdata_full v) 
				1. 可选的顶点修改函数 [可选]
				2. 根据Input的需要计算变量，存储到v2f_surf结构体中
		片元着色器: fixed4 frag_surf(v2f_surf IN)
				3. 使用v2f_surf中的结构填充Input结构体
				4. 表面函数								//填充SurfaceOutput
				5. 光照函数								//输出颜色值
				6. 其他对颜色的修改，如逐顶点光照		//光照图vs逐顶点光照
				7. 最后的颜色修改函数 [可选]

软粒子
		需要计算深度图 LinearEyeDepth 从深度图采样取场景深度值
		通过计算屏幕控制的位置的 partZ 值(object pos to view space)，两者相差做为一个soft的计算值 fade
		i.color *= fade 参与最终的颜色计算

COMPUTE_EYEDEPTH		-(UnityObjectToViewPos(v.vertex)).z

分类
Bumped Diffuse					//surf 通过采样bumpMap,得到o.Normal Lambert
Bumped Specular					//surf 通过采样bumpMap,得到o.Normal BlinnPhong
Bumped Unlit					//切线空间转到世界空间, 从bumpMap采样得到normal，转换到世界空间，reflect，然后采样cubemap
Bumped VertexLit				//ShaderVertexLightsFull考虑环境光 和MainTex颜色相乘
Diffuse							//surf MainTex得到albedo
Diffuse Detail					//surf MainTex和Detail图采样相乘做为albedo
Diffuse Fast
Specular						//surf 除了MainTex提供albedo，提供gloss, specular值，用于blinnphong计算
Parallax Diffuse				//surf 视差贴图采样计算 ParallaxOffset，然后对uv坐标进行偏移，计算albedo和normal Lambert
Parallax Specular				//surf 视差贴图采样计算 ParallaxOffset，然后对uv坐标进行偏移，计算albedo normal, specular, gloss  BlinnPhong
VertexLit						//MainTex颜色和lightmap解码得到的颜色相乘

Transparent:	alpha:fade 输出alpha过渡
Reflective: 	texCube采样世界空间的reflect vector
Lightmapped: 	采样lightmap和MainTex颜色相乘 做为 Emission
Cutout: 	alphatest队列 alphatest:_Cutoff 进行alphatest
Illumin:	Emission增加 Illum贴图的采样.a



































