AsyncLoad
AsyncLoadPanel		指定bundle加载interfaces
SyncLoadPanel		同步加载interfaces
UnloadBundle		卸载bundle
UnloadBundleOfAsset		卸载asset所属的bundle
ClearAssetBundleCache	清理同步加载的asset cache

RequestFx			请求获得一个fxone特效实例 实际的特效gameobject挂在fxone下面
PreloadFxAsset		提前加载CFxCache中的prefab






涉及的类:
	CAssetBundleManager
	
	CFxCacheMan
		_CachedFxOnes		//CFxOne组件缓存
		_FxAssetCaches		//Fx资源缓存，prefab + gameobject列表
		ActiveFxs			//在使用中的CFxOne
		_UncachedFxs		//Fx资源，非缓存的资源请求
		RequestFxOne		请求特效实例, 若在使用的fx超过数量限制,关闭一个最低优先级的特效
							从_FxAssetCaches中请求 CFxCache, 请求CFxOne，再把CFxCache和CFxOne建立联系
		
	CFxCache		
		加载过程中得到的CFxOne播放请求 可以理解为一个特效prefab的播放请求 
		_Asset		加载的特效prefab
		DeferedGotFx  在加载过程中收到的CFxOne请求
		List<GameObject> _CachedFxs 	缓存的特效gameObject，特效停止时缓存，播放时从缓存取
	
	CFxOne		表示一个特效播放的请求，下面挂一个特效gameobject，等特效gameobject创建后，才可以播放
		DoRealPlay			//FxProxy切换LOD，改变播放速度，播放ArcReactor, EarlyWarning, RadialBlurBoot(特殊处理)
	
	CFxProxy	管理特效的组件信息
		由CFxOne设置在特效的gameObject上，对于Fx美术资源中使用的组件做统一管理，用来做特效gameObject的复用
		包含 	FxComponentInfo
				ArcReactor_Arc
				FxYujingProgressEx
				RadialBlurBoot
	
	ComponentInfo	管理特效的组件，避免整个GameObject的Active，而是控制组件的enable Play
		ParticleSystem			//播放速度
		Animator				//播放速度
		MeshRenderer
		TrailRenderer
		Projector				//缩放逻辑
		ReusableFx				//第三方组件
		RFX4_ScaleCurves		//缩放逻辑
		ParticleSystemRenderer
	
	FxComponentInfo 
		管理特效的LOD 存储3个LOD的ComponentInfo[]组件信息
		
		FxComponentInfo如何生成?
		
	ResCacheMan		//ResourceCache下
		GameObject的资源缓存，回收时其中的组件 IRecyclable 调用 OnRecyle, BodyPartCollector.Revert
		Entity的GameObject缓存，回收时处理 ObjectBehavior 和 CMotor组件